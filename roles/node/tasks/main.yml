---
- name: 创建工作目录
  file:
    dest: "{{ k8s_work_dir }}/{{ item }}"
    state: directory
  with_items:
    - bin
    - cfg
    - ssl
    - logs

#- name: 创建cni插件目录
#  file:
#    dest: "{{ item }}"
#    state: directory
#  with_items:
#    - /opt/cni/bin
#    - /etc/cni/net.d

#- name: 分发并解压cni插件二进制包
#  copy:
#    src: "{{ item }}"
#    dest: /opt/cni/bin
#  with_items:
#    - bandwidth
#    - firewall
#    - flannel
#    - sbr
#    - portmap
#    - tuning
#    - bridge
#    - host-device
#    - ipvlan
#    - loopback
#    - macvlan
#    - ptp
#    - vlan
#    - dhcp
#    - static
#    - host-local

- name: 下载k8s node二进制文件
  get_url:
    url: "{{ item }}"
    dest: "{{ k8s_work_dir }}/bin"
    mode: u+x
  with_items:
    - "{{ kubelet_url }}"
    - "{{ kube_proxy_url }}"

- name: 创建k8s node二进制文件软链接
  file:
    dest: "{{ k8s_work_dir }}/bin/{{ item }}"
    src: "/usr/bin/{{ item }}"
    mode: u+x
    state: link
    force: true
  with_items:
    - kubelet
    - kube-proxy

- name: 分发k8s证书
  copy:
    src: k8s_cert/{{ item }}
    dest: "{{ k8s_work_dir }}/ssl"
  with_items:
    - ca.pem
    - kube-proxy.pem
    - kube-proxy-key.pem
  notify: restart kube-proxy

- name: 分发k8s配置文件
  template:
    src: "{{ item }}"
    dest: "{{ k8s_work_dir }}/cfg/{{ item.split('.')[:-1] | join('.') }}"
  with_items:
    - bootstrap.kubeconfig.j2
    - kubelet.conf.j2
    - kubelet-config.yml.j2
    - kube-proxy.kubeconfig.j2
    - kube-proxy.conf.j2
    - kube-proxy-config.yml.j2
  notify:
    - restart kubelet
    - restart kube-proxy

- name: 分发service文件
  template:
    src: "{{ item }}"
    dest: /lib/systemd/system/{{ item.split('.')[:-1] | join('.') }}
  with_items:
    - kubelet.service.j2
    - kube-proxy.service.j2
  notify:
    - restart kubelet
    - restart kube-proxy
    
- name: 启动k8s node组件
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  with_items:
    - kubelet
    - kube-proxy
