---
- name: 创建工作目录
  file:
    dest: "{{ k8s_work_dir }}/{{ item }}"
    state: directory
  with_items:
    - bin
    - cfg
    - ssl
    - logs
    - yaml

- name: 创建etcd证书目录
  file:
    dest: "{{ k8s_work_dir }}/ssl/etcd"
    state: directory

- name: 下载k8s master二进制文件
  get_url:
    url: "{{ item }}"
    dest: "{{ k8s_work_dir }}/bin"
    mode: u+x
  with_items:
    - "{{ kube_apiserver_url }}"
    - "{{ kube_controller_manager_url }}"
    - "{{ kube_scheduler_url }}"
    - "{{ kubectl_url }}"

- name: 创建kubectl二进制文件软链接
  file:
    src: "{{ k8s_work_dir }}/bin/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    mode: u+x
    state: link
    force: true
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kubectl

- name: 分发k8s证书
  copy:
    src: k8s_cert/{{ item }}
    dest: "{{ k8s_work_dir }}/ssl"
  with_items:
    - ca.pem
    - ca-key.pem
    - server.pem
    - server-key.pem
    - kube-controller-manager.pem
    - kube-controller-manager-key.pem
    - kube-scheduler.pem
    - kube-scheduler-key.pem
    - admin.pem
    - admin-key.pem

- name: 分发etcd证书
  copy:
    src: "etcd_cert/{{ item }}"
    dest: "{{ k8s_work_dir }}/ssl/etcd"
  with_items:
    - ca.pem
    - server.pem
    - server-key.pem

- name: 分发token文件
  copy:
    src: token.csv
    dest: "{{ k8s_work_dir }}/cfg"

- name: 分发k8s配置文件
  template:
    src: "{{ item }}"
    dest: "{{ k8s_work_dir }}/cfg/{{ item.split('.')[:-1] | join('.') }}"
  with_items:
    - kube-apiserver.conf.j2
    - kube-controller-manager.conf.j2
    - kube-scheduler.conf.j2
    - kube-controller-manager.kubeconfig.j2
    - kube-scheduler.kubeconfig.j2

- name: 分发service文件
  template:
    src: "{{ item }}"
    dest: /lib/systemd/system/{{ item.split('.')[:-1] | join('.') }}
  with_items:
    - kube-apiserver.service.j2
    - kube-controller-manager.service.j2
    - kube-scheduler.service.j2

- name: 启动k8s master组件
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: 创建kubectl配置文件目录
  file:
    dest: /root/.kube
    state: directory

- name: 分发k8s配置文件
  template:
    src: config.j2
    dest: /root/.kube/config

- name: 查看集群状态
  shell: sleep 3 && kubectl get cs
  register: cs

- debug:
    var: cs.stdout_lines

- name: 拷贝RBAC文件
  copy:
    src: "{{ item }}"
    dest: "{{ k8s_work_dir }}/yaml"
  with_items:
    - kubelet-bootstrap-rbac.yaml
    - apiserver-to-kubelet-rbac.yaml

- name: 授权APIServer访问Kubelet与授权kubelet bootstrap
  ignore_errors: yes
  shell: |
      sleep 3
      kubectl apply -f "{{ k8s_work_dir }}/yaml/apiserver-to-kubelet-rbac.yaml"
      kubectl apply -f "{{ k8s_work_dir }}/yaml/kubelet-bootstrap-rbac.yaml"

- name: 自动审批Kubelet证书
  ignore_errors: yes
  shell: |
     #自动批准首次申请证书的 CSR 请求
     kubectl create clusterrolebinding node-client-auto-approve-csr --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient --user=kubelet-bootstrap
     # 自动批准kubelet客户端证书续签
     kubectl create clusterrolebinding node-client-auto-renew-crt --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient --group=system:nodes
     # 自动批准kubelet服务端证书续签
     kubectl create clusterrolebinding node-server-auto-renew-crt --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeserver --group=system:nodes
  failed_when: false
  ignore_errors: true

- name: 新增命令行自动提示
  lineinfile:
    path: /etc/profile
    line: "{{ item }}"
  with_items:
    - export KUBECONFIG=/root/.kube/config
    - source <(kubectl completion bash)

- name: 定义节点ROLES属性
  shell: |
    kubectl label nodes "{{ node_name }}" node-role.kubernetes.io/master=
    kubectl label nodes "{{ node_name }}" node-role.kubernetes.io/worker=
  failed_when: false
  ignore_errors: true

- name: 安装kubetail查看pod日志工具
  get_url:
    url: https://raw.githubusercontent.com/johanhaleby/kubetail/master/kubetail
    dest: /usr/bin/kubetail
    owner: root
    group: root
    mode: u+x
